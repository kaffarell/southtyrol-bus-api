{"code":"import { __awaiter, __generator } from \"tslib\";\r\nimport request from 'request';\r\nimport * as xml2js from 'xml2js';\r\nfunction extractDataFromXML(returnBody) {\r\n    return new Promise(function (resolve, reject) {\r\n        var parser = new xml2js.Parser();\r\n        parser.parseString(returnBody, function (err, data) {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                var usefulResponse = data.itdRequest.itdStopFinderRequest[0].itdOdv;\r\n                var stopFinderRequestArray = [];\r\n                for (var i = 0; i < usefulResponse[0].itdOdvAssignedStops[0].itdOdvAssignedStop.length; i++) {\r\n                    var newStopFinderRequest = {\r\n                        nearestStopName: usefulResponse[0].itdOdvAssignedStops[0].itdOdvAssignedStop[i].$.nameWithPlace,\r\n                        nearestStopId: usefulResponse[0].itdOdvAssignedStops[0].itdOdvAssignedStop[i].$.stopId,\r\n                        nearestStopPlace: usefulResponse[0].itdOdvAssignedStops[0].itdOdvAssignedStop[i].$.place,\r\n                        nearestStopDistance: usefulResponse[0].itdOdvAssignedStops[0].itdOdvAssignedStop[i].$.distance,\r\n                        nearestStopDistanceTime: usefulResponse[0].itdOdvAssignedStops[0].itdOdvAssignedStop[i].$.distanceTime,\r\n                        nearestPlace: usefulResponse[0].itdOdvPlace[0].odvPlaceElem[0]._,\r\n                        nearestStreet: usefulResponse[0].itdOdvName[0].odvNameElem[0]._,\r\n                    };\r\n                    stopFinderRequestArray.push(newStopFinderRequest);\r\n                }\r\n                resolve(stopFinderRequestArray);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction getXMLData(longitude, latitude) {\r\n    return new Promise(function (resolve, reject) {\r\n        request('http://efa.sta.bz.it/apb/XML_STOPFINDER_REQUEST?locationServerActive=0&type_sf=coord&name_sf=' + longitude + ':' + latitude + ':WGS84[DD.DDDDD]', function (reqErr, reqRes, reqBody) {\r\n            if (reqErr) {\r\n                reject(reqErr);\r\n            }\r\n            else {\r\n                resolve(reqBody);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction findLocationAction(longitude, latitude) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var xmlData, processedData;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, getXMLData(longitude, latitude)];\r\n                case 1:\r\n                    xmlData = _a.sent();\r\n                    return [4 /*yield*/, extractDataFromXML(xmlData)];\r\n                case 2:\r\n                    processedData = _a.sent();\r\n                    return [2 /*return*/, processedData];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport { findLocationAction };\r\n","references":["/home/gabriel/Desktop/programming/southtyrol-mobile/southtyrol-bus-api/node_modules/@types/request/index.d.ts","/home/gabriel/Desktop/programming/southtyrol-mobile/southtyrol-bus-api/node_modules/@types/xml2js/index.d.ts"]}
